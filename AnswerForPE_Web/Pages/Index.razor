@page "/"
@inject HttpClient Http



<PageTitle>体育理论助手</PageTitle>
<style>
    /* 去除默认样式 */
    textarea {
        border: none;
        outline: none;
        padding: 0;
        margin: 0;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background-image: none;
        background-color: transparent;
        font-size: inherit;
        width: 100%;
        height:90vw;
    }

        textarea:focus {
            outline: none;
        }

    /* 自定义样式 */
    .mo-textarea {
        display: inline-block;
        resize: vertical;
        padding: 5px 15px;
        line-height: 1.5;
        box-sizing: border-box;
        color: #606266;
        background-color: #fff;
        border: 1px solid #dcdfe6;
        border-radius: 4px;
        transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
    }

        /* 提示文字 */
        .mo-textarea::placeholder {
            color: #c0c4cc;
        }

        /* 鼠标hover */
        .mo-textarea:hover {
            border-color: #c0c4cc;
        }

        /* 获得焦点 */
        .mo-textarea:focus {
            border-color: #3677f0;
        }
</style>

@if (txt_raw == null)
{
    <div class="alert alert-info">
        <strong>注意：</strong> 若长时间无法加载请尝试刷新，或者强制刷新(Shift+F5)
    </div>

    <div class="row">
        <div class="col"><h1>正在加载题库......</h1></div>
        <div class="col"><div class=" spinner-border text-primary"></div></div>
    </div>


    
    

}
else
{
    <div class="alert alert-success">
        <strong>成功!</strong> 题库加载完成，共检索到 @dict.Count 个条目
    </div>
    <div class="alert alert-info">    @anwser_num_str </div>

<div class="row">
        <h2 class="col">题目查询→</h2>
        <div class="col-8">
            <input type="text" class="form-control" placeholder="Input Key Words Here"
            @oninput="@((ChangeEventArgs __e) => InputValue = __e?.Value?.ToString())" />
        </div>

</div>
<br/>

    <textarea class="mo-textarea" disabled="disabled">
        @anwser
    </textarea>
}


@code{
    private string anwser_num_str
    {
        get
        {
            if (anwser_num == 0)
            {
                return "输入关键字以查询吧";
            }
            return $"共找到{anwser_num}个答案";
        }
    }
    private int anwser_num = 0;
    private string anwser = "输入内容以查询";
    private string? _InputValue="";
    private string? InputValue { get { return _InputValue; }  set {
            change(value);
        } }
    private  void change(string value)
    {
        _InputValue = value;
        anwser = "正在查询...";
        //await Task.Delay(20);
        if (_InputValue == "")
        {
            anwser = "输入内容以查询";
            return;
        }

        System.Text.StringBuilder sb = new();
        //sb.Clear();
        int count = 0;
        foreach (var item in dict)
        {
            if (item.Key.Contains(_InputValue))
            {
                sb.Append(item.Key);
                //sb.Append('\n');
                sb.Append(item.Value.Answer);
                sb.Append("\n\n");
                count++;
            }
        }
        anwser_num = count;
        anwser = sb.ToString();
        if (anwser_num == 0)
        {
            anwser = "emmmm,找不到";
        }

    }
    Dictionary<string, Entry> dict = new Dictionary<string, Entry>();
    public string? txt_raw;
    protected override async Task OnInitializedAsync()
    {
        txt_raw = await Http.GetStringAsync("sample-data/data_enhance.txt");
        //Console.WriteLine(txt_raw);
        var splited = txt_raw.Split(new string[] { "\r\n\r\n","\n\n" }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var i in splited)
        {

            int index = i.IndexOf("\r\n");
            if (index == -1)
            {
                index = i.IndexOf("\n");
            }
            if (index == -1 || index==0)
            {
                continue;
            }
            string question = i.Substring(0, index);
            string answer = i.Substring(index, i.Length - index);
            if (dict.ContainsKey(question))
            {
                if (dict[question].Prority < 1)
                {
                    Entry entry1 = new Entry(question, answer);
                    if (entry1.Prority > 0)
                    {
                        dict[question] = entry1;
                    }
                }
                else
                {
                    continue;
                }
            }
            else
            {
                Entry entry1 = new Entry(question, answer);
                dict[question] = entry1;
            }
        }
    }
    class Entry
    {
        public string Question { get; set; }
        public string Answer { get; set; }
        public int Prority { get; private set; } = 0;
        public Entry(string question, string answer)
        {
            Question = question;

            int index = answer.IndexOf("标准答案");
            if (index != -1)
            {
                int index2 = answer.IndexOf("你的答案");
                if (index2 != -1)
                {
                    Answer = answer.Substring(0, index2);
                    Answer += answer.Substring(index);
                }
                else
                {
                    Answer = answer;
                }

                Prority = 1;
            }
            else
            {
                Answer = answer;
            }

        }
        public override int GetHashCode()
        {
            return Question.GetHashCode();
        }
    }
}
